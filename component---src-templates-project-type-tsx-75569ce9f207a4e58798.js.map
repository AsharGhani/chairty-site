{"version":3,"sources":["webpack:///./src/components/PictureCard.tsx","webpack:///./src/styles/styledComponents.tsx","webpack:///./src/components/UpdateCard.tsx","webpack:///./src/templates/projectType.tsx","webpack:///./src/components/ProjectTitleBreadCrumb.tsx","webpack:///./node_modules/core-js/modules/es6.string.link.js"],"names":["colorTheme","themeLight","StyledPictureCardContainer","StyledImage","StyledTitle","dimensions","headingSizes","h2","StyledDescription","h4","StyledProjectLink","button","buttonText","fontSize","small","buttonHover","PictureCard","props","onClickAttribute","linkClass","link","onClick","navigate","className","imageSrc","src","title","imageTitle","width","height","description","md","getEmSize","breakpoints","StyledLinkButton","ContentsCentered","lg","StyledTitleDescriptionContainer","StyledUpdateCardContainer","h3","StyledDate","dates","UpdateCard","date","toLocaleDateString","undefined","weekday","year","month","day","xl","widths","StyledChildLinksContainer","query","PageTemplate","goToStartButton","projectType","data","contentfulProjectType","childDescriptionNode","descriptionHtml","childMarkdownRemark","html","childProjectTypeCards","childProjectEntryCards","childProjectTypes","childProjectType","push","internal","content","featureImage","fluid","slug","key","childProjectsList","sortedProjectsList","sort","projectA","projectB","startDate","layout","href","style","childProjectEntry","entryCard","dateValue","Date","Page","parent","parentProject","dangerouslySetInnerHTML","__html","StyledTitleContainerDiv","activeItem","SytledTitle","h1","StyledBreadCrumbEntry","Link","regular","buttonSecondary","StyledBreadCrumbSeparator","large","createBreadCrumbEntry","text","to","ProjectTitleBreadCrump","breadCrumbEntries","breadCrumbProjects","reverse","createHTML","url","this"],"mappings":"0iBAKA,IAAMA,EAAaC,IAUbC,EAA6B,mBAAH,oBAAG,CAAH,kKAU1BC,EAAc,mBAAH,oBAAG,CAAH,oDAKXC,EAAc,oBAAH,oBAAG,CAAH,6BAEFC,IAAWC,aAAaC,GAFtB,uDAQXC,EAAoB,oBAAH,oBAAG,CAAH,aACRH,IAAWC,aAAaG,GADhB,0FAQjBC,EAAoB,mBAAH,oBAAG,CAAH,gCAEPV,EAAWW,OAFJ,UAGZX,EAAWY,WAHC,cAIRP,IAAWQ,SAASC,MAJZ,kGAWLd,EAAWe,YAXN,2BAmCRC,EAnBiC,SAASC,GACvD,IACIC,EADEC,EAAYF,EAAMG,KAAO,OAAS,GAQxC,OANIH,EAAMG,OACRF,EAAmB,CACjBG,QAAS,kBAAMC,YAASL,EAAMG,SAKhC,YAAClB,EAAD,GAA4BqB,UAAWJ,GAAeD,GACnDD,EAAMO,UAAY,YAACrB,EAAD,CAAasB,IAAKR,EAAMO,SAAUE,MAAOT,EAAMU,WAAYC,MAAM,QAAQC,OAAO,UACnG,YAACzB,EAAD,KAAca,EAAMS,OACnBT,EAAMa,aAAe,YAACtB,EAAD,KAAoBS,EAAMa,aAC/Cb,EAAMG,MAAQ,YAACV,EAAD,e,wBCvEfV,EAAaC,IACb8B,EAAK,sBAAsBC,YAAUC,IAAYF,IAA/C,MAEFG,EAAmB,mBAAH,oBAAG,CAAH,gCAENlC,EAAWW,OAFL,UAGXX,EAAWY,WAHA,cAIPP,IAAWQ,SAASC,MAJb,kIAYJd,EAAWe,YAZP,KAelBgB,EAfkB,eAoBhBI,EAAmB,mBAAH,oBAAG,CAAH,8F,+MCrBtB,IAAMnC,EAAaC,IAEbmC,EAAK,sBAAsBJ,YAAUC,IAAYG,IAA/C,MACFL,EAAK,sBAAsBC,YAAUC,IAAYF,IAA/C,MAWFM,EAAkC,mBAAH,mBAAG,CAAH,wDAK/BC,EAA4B,mBAAH,mBAAG,CAAH,2HAOhBN,YAAUC,IAAYG,IAPN,iHAc3BA,EAd2B,+CAoBzBjC,EAAc,mBAAH,mBAAG,CAAH,0DAMb4B,EANa,oCAYX3B,EAAc,oBAAH,mBAAG,CAAH,gCAEFC,IAAWC,aAAaiC,GAFtB,2DAQXC,EAAa,mBAAH,mBAAG,CAAH,SACLxC,EAAWyC,MADN,cAEDpC,IAAWC,aAAaG,GAFvB,2BAMVD,EAAoB,oBAAH,mBAAG,CAAH,aACRH,IAAWC,aAAaG,GADhB,4GAQnBsB,EARmB,2BAqCRW,EAxB+B,SAASzB,GACrD,IACIC,EADEC,EAAYF,EAAMG,KAAO,OAAS,GAEpCH,EAAMG,OACRF,EAAmB,CACjBG,QAAS,kBAAMC,YAASL,EAAMG,SAMlC,OACE,YAACkB,EAAD,GAA2Bf,UAAWJ,GAAeD,GACnD,YAACmB,EAAD,KACE,YAAC,EAAD,KAAcpB,EAAMS,OACnBT,EAAM0B,MAAQ,YAACH,EAAD,KAAavB,EAAM0B,KAAKC,wBAAmBC,EAN5C,CAAEC,QAAS,OAAQC,KAAM,UAAWC,MAAO,OAAQC,IAAK,aAOrEhC,EAAMa,aAAe,YAAC,EAAD,KAAoBb,EAAMa,aAC/Cb,EAAMG,MAAQ,YAACc,EAAD,cAEhBjB,EAAMO,UAAY,YAAC,EAAD,CAAaC,IAAKR,EAAMO,SAAUE,MAAOT,EAAMU,WAAYC,MAAM,QAAQC,OAAO,Y,k0BC3FzG,IAAMqB,EAAK,sBAAsBlB,YAAUC,IAAYiB,IAA/C,MAEF1C,EAAoB,mBAAH,mBAAG,CAAH,cAGnB0C,EAHmB,UAIVlB,YAAUmB,IAAOD,IAJP,oBASjBE,EAA4B,mBAAH,mBAAG,CAAH,oIAoHlBC,GAFEC,UAnGoC,SAAC,GAAa,IAuB3DC,EAtBEC,EADyD,EAAXC,KAC3BC,sBACnBC,EAAuBH,EAAY1B,YACnC8B,EAAkBD,GAAwBA,EAAqBE,oBAAoBC,KAEnFC,EAA2C,GAC3CC,EAA4C,GAElD,GAAIR,EAAYS,kBACd,cAA+BT,EAAYS,qBAA3C,aAA8D,KAAnDC,EAAmD,QAC5DH,EAAsBI,KACpB,YAAC,EAAD,CACEzC,MAAOwC,EAAiBxC,MACxBI,YAAaoC,EAAiBpC,aAAeoC,EAAiBpC,YAAY+B,oBAAoBO,SAASC,QACvG7C,SAAU0C,EAAiBI,cAAgBJ,EAAiBI,aAAaC,MAAM9C,IAC/EE,WAAYuC,EAAiBI,cAAgBJ,EAAiBI,aAAa5C,MAC3EN,KAAM,gBAAkB8C,EAAiBM,KACzCC,IAAKP,EAAiBM,QAO9B,GAAIhB,EAAYkB,kBAAmB,CACjC,IAAMC,EAAqBnB,EAAYkB,kBAAkBE,MAAK,SAACC,EAAUC,GAAX,OAC5DD,EAASE,UAAYD,EAASC,UAAY,GAAK,KAG7CvB,EAAYwB,QAAiC,gBAAvBxB,EAAYwB,SACpCzB,EACE,YAACpB,EAAD,KACE,iBAAG8C,KAAM,WACP,YAAC/C,EAAD,CAAkBgD,MAAO,CAAEtD,MAAO,SAAlC,6BAMR,cAAgC+C,KAAhC,aAAoD,KAAzCQ,EAAyC,QAC9C/D,OAAwB,EACK,WAA7B+D,EAAkBH,SACpB5D,EAAO,iBAAmB+D,EAAkBX,MAG9C,IAAIY,OAA0B,EAE9B,GAAI5B,EAAYwB,QAAiC,gBAAvBxB,EAAYwB,OAA0B,CAC9D,IAAMK,EAAYF,EAAkBJ,UAAY,IAAIO,KAAKH,EAAkBJ,gBAAalC,EACxFuC,EACE,YAAC,EAAD,CACE1D,MAAOyD,EAAkBzD,MACzBI,YAAaqD,EAAkBrD,aAAeqD,EAAkBrD,YAAY+B,oBAAoBO,SAASC,QACzG7C,SAAU2D,EAAkBb,cAAgBa,EAAkBb,aAAaC,MAAM9C,IACjFE,WAAYwD,EAAkBb,cAAgBa,EAAkBb,aAAa5C,MAC7EN,KAAMA,EACNuB,KAAM0C,EACNZ,IAAKU,EAAkBX,YAI3BY,EACE,YAAC,EAAD,CACE1D,MAAOyD,EAAkBzD,MACzBI,YAAaqD,EAAkBrD,aAAeqD,EAAkBrD,YAAY+B,oBAAoBO,SAASC,QACzG7C,SAAU2D,EAAkBb,cAAgBa,EAAkBb,aAAaC,MAAM9C,IACjFE,WAAYwD,EAAkBb,cAAgBa,EAAkBb,aAAa5C,MAC7EN,KAAMA,EACNqD,IAAKU,EAAkBX,OAK7BR,EAAuBG,KAAKiB,IAIhC,OACE,YAAC,IAAD,KACE,YAACG,EAAA,EAAD,KACE,mBAAKhE,UAAU,YACb,YAAC,IAAD,CAAwBG,MAAO8B,EAAY9B,MAAO8D,OAAQhC,EAAYiC,gBAErE7B,GACC,YAAC,EAAD,KACE,mBAAK8B,wBAAyB,CAAEC,OAAQ/B,MAG3CL,EACD,YAACH,EAAD,KACGW,EACAC,OAUQ,e,w6BCtIrB,IAAMhE,EAAaC,IAEbiD,EAAK,sBAAsBlB,YAAUC,IAAYiB,IAA/C,MACFd,EAAK,sBAAsBJ,YAAUC,IAAYG,IAA/C,MAEFwD,EAA0B,mBAAH,mBAAG,CAAH,oGASzB1C,EATyB,UAUhBlB,YAAUmB,IAAOD,IAVD,gGAmBLlD,EAAW6F,WAnBN,MAuBvBC,EAAc,oBAAH,mBAAG,CAAH,aACFzF,IAAWC,aAAaiC,GADtB,OAGbH,EAHa,cAIA/B,IAAWC,aAAayF,GAJxB,SAQXC,EAAwB,YAAOC,IAAP,qBAAH,aACZ5F,IAAWQ,SAASqF,QADR,YAEhBlG,EAAWmG,gBAFK,IAIvB/D,EAJuB,cAKV/B,IAAWC,aAAaG,GALd,SASrB2F,EAA4B,oBAAH,mBAAG,CAAH,aAChB/F,IAAWQ,SAASwF,MADJ,YAEpBrG,EAAWyC,MAFS,0CAc/B,SAAS6D,EAAsBC,EAAcnF,GAC3C,OACE,4BACE,YAAC4E,EAAD,CAAuBQ,GAAIpF,EAAMqD,IAAI,QAClC8B,GACsB,IACzB,YAACH,EAAD,OA6BSK,IAxBuD,SAASxF,GAC7E,IAAMyF,EAAoB,GAC1BA,EAAkBvC,KAAKmC,EAAsB,OAAQ,MAIrD,IAFA,IAAIK,EAAqB,GACrBlB,EAAgBxE,EAAMuE,OACnBC,GAAe,CACpB,IAAMrE,EAAO,gBAAkBqE,EAAcjB,KAC7CmC,EAAmBxC,KAAKmC,EAAsBb,EAAc/D,MAAON,IACnEqE,EAAgBA,EAAcA,cAOhC,OAJAkB,EAAqBA,EAAmBC,UAExCF,EAAkBvC,KAAlB,MAAAuC,EAAiB,EAASC,IAGxB,YAACf,EAAD,KACGc,EACD,YAACZ,EAAD,KAAc7E,EAAMS,U,kCC7F1B,EAAQ,OAAR,CAA0B,QAAQ,SAAUmF,GAC1C,OAAO,SAAcC,GACnB,OAAOD,EAAWE,KAAM,IAAK,OAAQD","file":"component---src-templates-project-type-tsx-75569ce9f207a4e58798.js","sourcesContent":["import * as React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { themeLight, dimensions } from \"../styles/variables\";\r\nimport { navigate } from \"gatsby\";\r\n\r\nconst colorTheme = themeLight;\r\n\r\nexport interface PictureCardProps {\r\n  title: string;\r\n  link?: string;\r\n  description?: string;\r\n  imageSrc?: string;\r\n  imageTitle?: string;\r\n}\r\n\r\nconst StyledPictureCardContainer = styled.div`\r\n  margin: 10px 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 300px;\r\n  align-items: center;\r\n  box-shadow: 0 0px 12px rgba(0, 0, 0, 0.2);\r\n  padding: 16px;\r\n`;\r\n\r\nconst StyledImage = styled.img`\r\n  width: 300px;\r\n  height: 300px;\r\n`;\r\n\r\nconst StyledTitle = styled.span`\r\n  padding: 8px 0px;\r\n  font-size: ${dimensions.headingSizes.h2}rem;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst StyledDescription = styled.span`\r\n  font-size: ${dimensions.headingSizes.h4};\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-line-clamp: 3;\r\n`;\r\n\r\nconst StyledProjectLink = styled.div`\r\n  text-align: center;\r\n  background: ${colorTheme.button};\r\n  color: ${colorTheme.buttonText};\r\n  font-size: ${dimensions.fontSize.small}px;\r\n  text-decoration: none;\r\n  padding: 4px 8px;\r\n  width: 120px;\r\n  margin-top: 20px;\r\n  &:focus,\r\n  &:hover {\r\n    background: ${colorTheme.buttonHover};\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nconst PictureCard: React.FC<PictureCardProps> = function(props: PictureCardProps) {\r\n  const linkClass = props.link ? \"link\" : \"\";\r\n  let onClickAttribute;\r\n  if (props.link) {\r\n    onClickAttribute = {\r\n      onClick: () => navigate(props.link!),\r\n    };\r\n  }\r\n\r\n  return (\r\n    <StyledPictureCardContainer className={linkClass} {...onClickAttribute}>\r\n      {props.imageSrc && <StyledImage src={props.imageSrc} title={props.imageTitle} width=\"300px\" height=\"300px\"></StyledImage>}\r\n      <StyledTitle>{props.title}</StyledTitle>\r\n      {props.description && <StyledDescription>{props.description}</StyledDescription>}\r\n      {props.link && <StyledProjectLink>View</StyledProjectLink>}\r\n    </StyledPictureCardContainer>\r\n  );\r\n};\r\n\r\nexport default PictureCard;\r\n","import * as React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { themeLight, breakpoints, dimensions } from \"./variables\";\r\nimport { getEmSize } from \"./mixins\";\r\n\r\nconst colorTheme = themeLight;\r\nconst md = `@media (min-width: ${getEmSize(breakpoints.md)}em)`;\r\n\r\nconst StyledLinkButton = styled.div`\r\n  text-align: center;\r\n  background: ${colorTheme.button};\r\n  color: ${colorTheme.buttonText};\r\n  font-size: ${dimensions.fontSize.small}px;\r\n  text-decoration: none;\r\n  padding: 4px 8px;\r\n  width: 120px;\r\n  margin: 0px auto;\r\n  &:focus,\r\n  &:hover {\r\n    text-decoration: none !important;\r\n    background: ${colorTheme.buttonHover};\r\n  }\r\n\r\n  ${md} {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst ContentsCentered = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport { ContentsCentered, StyledLinkButton };\r\n","import * as React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { themeLight, dimensions, breakpoints } from \"../styles/variables\";\r\nimport { navigate } from \"gatsby\";\r\nimport { getEmSize } from \"../styles/mixins\";\r\nimport { StyledLinkButton } from \"../styles/styledComponents\";\r\n\r\nconst colorTheme = themeLight;\r\n\r\nconst lg = `@media (min-width: ${getEmSize(breakpoints.lg)}em)`;\r\nconst md = `@media (min-width: ${getEmSize(breakpoints.md)}em)`;\r\n\r\nexport interface UpdateCardProps {\r\n  title: string;\r\n  link?: string;\r\n  date?: Date;\r\n  description?: string;\r\n  imageSrc?: string;\r\n  imageTitle?: string;\r\n}\r\n\r\nconst StyledTitleDescriptionContainer = styled.div`\r\n  flex-basis: 300px;\r\n  flex-grow: 1;\r\n`;\r\n\r\nconst StyledUpdateCardContainer = styled.div`\r\n  margin: 10px 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n  max-width: ${getEmSize(breakpoints.lg)}em;\r\n  align-items: flex-start;\r\n  box-shadow: 0 0px 12px rgba(0, 0, 0, 0.2);\r\n  padding: 24px;\r\n  border-radius: 5px;\r\n  flex-wrap: wrap;\r\n\r\n  ${lg} {\r\n    margin: 10px 20px;\r\n    width: calc(100% - 80px);\r\n  }\r\n`;\r\n\r\nconst StyledImage = styled.img`\r\n  width: 220px;\r\n  height: 220px;\r\n  margin: 0 auto;\r\n  margin-top: 24px;\r\n\r\n  ${md} {\r\n    margin-left: 24px;\r\n    margin-top: 0;\r\n  }\r\n`;\r\n\r\nconst StyledTitle = styled.span`\r\n  padding-bottom: 8px;\r\n  font-size: ${dimensions.headingSizes.h3}rem;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n`;\r\n\r\nconst StyledDate = styled.div`\r\n  color: ${colorTheme.dates};\r\n  font-size: ${dimensions.headingSizes.h4}rem;\r\n  padding-bottom: 8px;\r\n`;\r\n\r\nconst StyledDescription = styled.span`\r\n  font-size: ${dimensions.headingSizes.h4};\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-line-clamp: 7;\r\n  margin-bottom: 20px;\r\n\r\n  ${md} {\r\n    -webkit-line-clamp: 5;\r\n  }\r\n`;\r\n\r\nconst UpdateCard: React.FC<UpdateCardProps> = function(props: UpdateCardProps) {\r\n  const linkClass = props.link ? \"link\" : \"\";\r\n  let onClickAttribute;\r\n  if (props.link) {\r\n    onClickAttribute = {\r\n      onClick: () => navigate(props.link!),\r\n    };\r\n  }\r\n\r\n  const dateOptions = { weekday: \"long\", year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n\r\n  return (\r\n    <StyledUpdateCardContainer className={linkClass} {...onClickAttribute}>\r\n      <StyledTitleDescriptionContainer>\r\n        <StyledTitle>{props.title}</StyledTitle>\r\n        {props.date && <StyledDate>{props.date.toLocaleDateString(undefined, dateOptions)}</StyledDate>}\r\n        {props.description && <StyledDescription>{props.description}</StyledDescription>}\r\n        {props.link && <StyledLinkButton>View</StyledLinkButton>}\r\n      </StyledTitleDescriptionContainer>\r\n      {props.imageSrc && <StyledImage src={props.imageSrc} title={props.imageTitle} width=\"300px\" height=\"300px\"></StyledImage>}\r\n    </StyledUpdateCardContainer>\r\n  );\r\n};\r\n\r\nexport default UpdateCard;\r\n","import * as React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\n\r\nimport Page from \"../components/Page\";\r\nimport IndexLayout from \"../layouts\";\r\nimport styled from \"@emotion/styled\";\r\nimport PictureCard from \"../components/PictureCard\";\r\nimport ProjectTitleBreadCrump from \"../components/ProjectTitleBreadCrumb\";\r\nimport { getEmSize } from \"../styles/mixins\";\r\nimport { widths, breakpoints } from \"../styles/variables\";\r\nimport UpdateCard from \"../components/UpdateCard\";\r\nimport { StyledLinkButton, ContentsCentered } from \"../styles/styledComponents\";\r\n\r\nconst xl = `@media (min-width: ${getEmSize(breakpoints.xl)}em)`;\r\n\r\nconst StyledDescription = styled.div`\r\n  width: 100%;\r\n\r\n  ${xl} {\r\n    width: ${getEmSize(widths.xl)}em;\r\n    margin: auto;\r\n  }\r\n`;\r\n\r\nconst StyledChildLinksContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\ninterface PageTemplateProps {\r\n  data: {\r\n    contentfulProjectType: ProjectType;\r\n  };\r\n}\r\n\r\nconst PageTemplate: React.SFC<PageTemplateProps> = ({ data }) => {\r\n  const projectType = data.contentfulProjectType;\r\n  const childDescriptionNode = projectType.description;\r\n  const descriptionHtml = childDescriptionNode && childDescriptionNode.childMarkdownRemark.html;\r\n\r\n  const childProjectTypeCards: React.ReactNode[] = [];\r\n  const childProjectEntryCards: React.ReactNode[] = [];\r\n\r\n  if (projectType.childProjectTypes) {\r\n    for (const childProjectType of projectType.childProjectTypes) {\r\n      childProjectTypeCards.push(\r\n        <PictureCard\r\n          title={childProjectType.title}\r\n          description={childProjectType.description && childProjectType.description.childMarkdownRemark.internal.content}\r\n          imageSrc={childProjectType.featureImage && childProjectType.featureImage.fluid.src}\r\n          imageTitle={childProjectType.featureImage && childProjectType.featureImage.title}\r\n          link={\"/projecttype/\" + childProjectType.slug}\r\n          key={childProjectType.slug}\r\n        ></PictureCard>,\r\n      );\r\n    }\r\n  }\r\n\r\n  let goToStartButton: React.ReactNode;\r\n  if (projectType.childProjectsList) {\r\n    const sortedProjectsList = projectType.childProjectsList.sort((projectA, projectB) =>\r\n      projectA.startDate < projectB.startDate ? 1 : -1,\r\n    );\r\n\r\n    if (projectType.layout && projectType.layout === \"UpdatesList\") {\r\n      goToStartButton = (\r\n        <ContentsCentered>\r\n          <a href={\"#footer\"}>\r\n            <StyledLinkButton style={{ width: \"auto\" }}>Go to the first update</StyledLinkButton>\r\n          </a>\r\n        </ContentsCentered>\r\n      );\r\n    }\r\n\r\n    for (const childProjectEntry of sortedProjectsList) {\r\n      let link: string | undefined;\r\n      if (childProjectEntry.layout !== \"NoPage\") {\r\n        link = \"/projectentry/\" + childProjectEntry.slug;\r\n      }\r\n\r\n      let entryCard: React.ReactNode;\r\n\r\n      if (projectType.layout && projectType.layout === \"UpdatesList\") {\r\n        const dateValue = childProjectEntry.startDate ? new Date(childProjectEntry.startDate) : undefined;\r\n        entryCard = (\r\n          <UpdateCard\r\n            title={childProjectEntry.title}\r\n            description={childProjectEntry.description && childProjectEntry.description.childMarkdownRemark.internal.content}\r\n            imageSrc={childProjectEntry.featureImage && childProjectEntry.featureImage.fluid.src}\r\n            imageTitle={childProjectEntry.featureImage && childProjectEntry.featureImage.title}\r\n            link={link}\r\n            date={dateValue}\r\n            key={childProjectEntry.slug}\r\n          ></UpdateCard>\r\n        );\r\n      } else {\r\n        entryCard = (\r\n          <PictureCard\r\n            title={childProjectEntry.title}\r\n            description={childProjectEntry.description && childProjectEntry.description.childMarkdownRemark.internal.content}\r\n            imageSrc={childProjectEntry.featureImage && childProjectEntry.featureImage.fluid.src}\r\n            imageTitle={childProjectEntry.featureImage && childProjectEntry.featureImage.title}\r\n            link={link}\r\n            key={childProjectEntry.slug}\r\n          ></PictureCard>\r\n        );\r\n      }\r\n\r\n      childProjectEntryCards.push(entryCard);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <IndexLayout>\r\n      <Page>\r\n        <div className=\"maxWidth\">\r\n          <ProjectTitleBreadCrump title={projectType.title} parent={projectType.parentProject}></ProjectTitleBreadCrump>\r\n          {/* eslint-disable-next-line react/no-danger */}\r\n          {descriptionHtml && (\r\n            <StyledDescription>\r\n              <div dangerouslySetInnerHTML={{ __html: descriptionHtml }} />\r\n            </StyledDescription>\r\n          )}\r\n          {goToStartButton}\r\n          <StyledChildLinksContainer>\r\n            {childProjectTypeCards}\r\n            {childProjectEntryCards}\r\n          </StyledChildLinksContainer>\r\n        </div>\r\n      </Page>\r\n    </IndexLayout>\r\n  );\r\n};\r\n\r\nexport default PageTemplate;\r\n\r\nexport const query = graphql`\r\n  query projectTypePageQuery($slug: String!) {\r\n    contentfulProjectType(slug: { eq: $slug }) {\r\n      slug\r\n      title\r\n      startDate\r\n      layout\r\n      parentProject {\r\n        slug\r\n        parentProject {\r\n          slug\r\n          parentProject {\r\n            slug\r\n            title\r\n          }\r\n          title\r\n        }\r\n        title\r\n      }\r\n      childProjectsList {\r\n        slug\r\n        title\r\n        layout\r\n        startDate\r\n        featureImage {\r\n          fluid {\r\n            src\r\n          }\r\n          title\r\n        }\r\n        description {\r\n          childMarkdownRemark {\r\n            html\r\n            internal {\r\n              content\r\n            }\r\n          }\r\n        }\r\n      }\r\n      description {\r\n        childMarkdownRemark {\r\n          html\r\n        }\r\n      }\r\n      childProjectTypes {\r\n        slug\r\n        title\r\n        startDate\r\n        description {\r\n          childMarkdownRemark {\r\n            html\r\n            internal {\r\n              content\r\n            }\r\n          }\r\n        }\r\n        featureImage {\r\n          fluid {\r\n            src\r\n          }\r\n          title\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import * as React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { themeLight, dimensions, widths, breakpoints } from \"../styles/variables\";\r\nimport { Link } from \"gatsby\";\r\nimport { getEmSize } from \"../styles/mixins\";\r\n\r\nconst colorTheme = themeLight;\r\n\r\nconst xl = `@media (min-width: ${getEmSize(breakpoints.xl)}em)`;\r\nconst lg = `@media (min-width: ${getEmSize(breakpoints.lg)}em)`;\r\n\r\nconst StyledTitleContainerDiv = styled.div`\r\n  width: 100%;\r\n  padding-bottom: 20px;\r\n\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n\r\n  ${xl} {\r\n    width: ${getEmSize(widths.xl)}em;\r\n    margin: auto;\r\n  }\r\n\r\n  &:after {\r\n    content: \"\";\r\n    display: block;\r\n    width: 100%;\r\n    height: 0.125rem;\r\n    background-color: ${colorTheme.activeItem};\r\n  }\r\n`;\r\n\r\nconst SytledTitle = styled.span`\r\n  font-size: ${dimensions.headingSizes.h3}rem;\r\n\r\n  ${lg} {\r\n    font-size: ${dimensions.headingSizes.h1}rem;\r\n  }\r\n`;\r\n\r\nconst StyledBreadCrumbEntry = styled(Link)`\r\n  font-size: ${dimensions.fontSize.regular}px;\r\n  color: ${colorTheme.buttonSecondary};\r\n\r\n  ${lg} {\r\n    font-size: ${dimensions.headingSizes.h4}rem;\r\n  }\r\n`;\r\n\r\nconst StyledBreadCrumbSeparator = styled.span`\r\n  font-size: ${dimensions.fontSize.large}px;\r\n  color: ${colorTheme.dates};\r\n  &:after {\r\n    content: \"\\u232a\";\r\n  }\r\n  padding: 0px 8px;\r\n`;\r\n\r\ninterface ProjectTitleBreadCrumpProps {\r\n  title: string;\r\n  parent?: ProjectType;\r\n}\r\n\r\nfunction createBreadCrumbEntry(text: string, link: string) {\r\n  return (\r\n    <>\r\n      <StyledBreadCrumbEntry to={link} key=\"link\">\r\n        {text}\r\n      </StyledBreadCrumbEntry>{\" \"}\r\n      <StyledBreadCrumbSeparator />\r\n    </>\r\n  );\r\n}\r\n\r\nconst ProjectTitleBreadCrump: React.FC<ProjectTitleBreadCrumpProps> = function(props) {\r\n  const breadCrumbEntries = [];\r\n  breadCrumbEntries.push(createBreadCrumbEntry(\"Home\", \"/\"));\r\n\r\n  let breadCrumbProjects = [];\r\n  let parentProject = props.parent;\r\n  while (parentProject) {\r\n    const link = \"/projecttype/\" + parentProject.slug;\r\n    breadCrumbProjects.push(createBreadCrumbEntry(parentProject.title, link));\r\n    parentProject = parentProject.parentProject;\r\n  }\r\n\r\n  breadCrumbProjects = breadCrumbProjects.reverse();\r\n\r\n  breadCrumbEntries.push(...breadCrumbProjects);\r\n\r\n  return (\r\n    <StyledTitleContainerDiv>\r\n      {breadCrumbEntries}\r\n      <SytledTitle>{props.title}</SytledTitle>\r\n    </StyledTitleContainerDiv>\r\n  );\r\n};\r\n\r\nexport default ProjectTitleBreadCrump;\r\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n"],"sourceRoot":""}